#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
usage: chrome-passwords [-j] [-p PROFILE]

options:
    -p, --profile PROFILE   Chromium profile to read from [default: Default]
    -j, --json              output passwords in JSON
"""

import json
import os
import sqlite3
import sys

import docopt

XDG_CONFIG_HOME = os.environ.get("XDG_CONFIG_HOME",
                                 os.path.expanduser("~/.config"))


def main(args):
    opts = docopt.docopt(__doc__, args)
    profile = opts["--profile"]

    dbpath = os.path.join(XDG_CONFIG_HOME, "chromium", profile, "Login Data")
    try:
        with sqlite3.connect(dbpath) as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT origin_url,
                       username_value,
                       password_value,
                       date_created
                FROM logins;
            """)

            # On Linux, Chrome stores passwords in cleartext.  However, on
            # Windows it uses the Cryptography API and so you'd need to use the
            # win32crypt package like so:
            #
            #    win32crypt.CryptUnprotectData(p[2], None, None, None, 0)[1]
            #
            passwords = [{
                "site": p[0],
                "username": p[1],
                "password": p[2].decode("utf-8"),
            } for p in cur.fetchall()]

    except sqlite3.OperationalError as e:
        errors = {
            "database is locked": "make sure Chrome is not running",
            "unable to open database file": "cannot find Chrome's files",
            "no such table: logins": "something is wrong with the database",
        }
        print("[!]", errors.get(str(e), str(e)), file=sys.stderr)
        sys.exit(1)

    if opts["--json"]:
        json.dump(passwords, sys.stdout)
    else:
        for p in passwords:
            print("%(site)s\t%(username)s\t%(password)s" % p)


if __name__ == "__main__":
    main(sys.argv[1:])
